;;; This file is I copy the code from others

;;;useful in emacsclient
(defun close-all-buffers ()
  (interactive)
  (if (yes-or-no-p "kill all buffers?")
      (progn 
	(save-some-buffers)
	(mapc 'kill-buffer (buffer-list)))))

;;;from wang yin,this function is to imitate the vim's "f" function
(defun wy-go-to-char (n char)
  "Move forward to Nth occurence of CHAR.
Typing `wy-go-to-char-key' again will move forwad to the next Nth
occurence of CHAR."
  (interactive "p\ncGo to char: ")
  (search-forward (string char) nil nil n)
  (while (char-equal (read-char)
		     char)
    (search-forward (string char) nil nil n))
  (setq unread-command-events (list last-input-event)))

(defun peng-line-up ()
  "Scroll the page with the cursor in the same line"
  (interactive)
  ;; move the cursor also
  (let ((tmp (current-column)))
    (scroll-down 1)
    (line-move-to-column tmp)
    (forward-line -1)
    )
  )
(defun peng-line-down ()
  "Scroll the page with the cursor in the same line"
  (interactive)
  ;; move the cursor also
  (let ((tmp (current-column)))
    (scroll-up 1)
    (line-move-to-column tmp)
    (forward-line 1)
    )
  )

(defun org-insert-src-block (src-code-type)
  "Insert a `SRC-CODE-TYPE' type source code block in org-mode."
  (interactive
   (let ((src-code-types
          '("emacs-lisp" "python" "C" "sh" "java" "js" "clojure" "C++" "css"
            "calc" "asymptote" "dot" "gnuplot" "ledger" "lilypond" "mscgen"
            "octave" "oz" "plantuml" "R" "sass" "screen" "sql" "awk" "ditaa"
            "haskell" "latex" "lisp" "matlab" "ocaml" "org" "perl" "ruby"
            "scheme" "sqlite")))
     (list (ido-completing-read "Source code type: " src-code-types))))
  (progn
    (newline-and-indent)
    (insert (format "#+BEGIN_SRC %s\n" src-code-type))
    (newline-and-indent)
    (insert "#+END_SRC\n")
    (previous-line 2)
    (org-edit-src-code)))

(defun show-buffer-major-mode (buffer-or-string)
  "Returns the major mode associated with a buffer."
  (with-current-buffer buffer-or-string major-mode))

;;; ----------------------------------------------------------------------
;;; 写一些脚本文件，在保存的时候自动为其加上可执行权限，非常有用
;;; ----------------------------------------------------------------------
(setq my-shebang-patterns
      (list "^#!/usr/.*/perl\\(\\( \\)\\|\\( .+ \\)\\)-w *.*"
	    "^#!/usr/.*/sh"
	    "^#!/usr/.*/bash"
	    "^#!/bin/sh"
	    "^#!/.*/perl"
	    "^#!/.*/awk"
	    "^#!/.*/sed"
	    "^#!/bin/bash"))
(add-hook
 'after-save-hook
 (lambda ()
   (if (not (= (shell-command (concat "test -x " (buffer-file-name))) 0))
       (progn
	 ;; This puts message in *Message* twice, but minibuffer
	 ;; output looks better.
	 (message (concat "Wrote " (buffer-file-name)))
	 (save-excursion
	   (goto-char (point-min))
	   ;; Always checks every pattern even after
	   ;; match.  Inefficient but easy.
	   (dolist (my-shebang-pat my-shebang-patterns)
	     (if (looking-at my-shebang-pat)
		 (if (= (shell-command
			 (concat "chmod u+x " (buffer-file-name)))
			0)
		     (message (concat
			       "Wrote and made executable "
			       (buffer-file-name))))))))
     ;; This puts message in *Message* twice, but minibuffer output
     ;; looks better.
     (message (concat "Wrote " (buffer-file-name))))))
;;; ----------------------------------------------------------------------

(defun peng-remove-orgmode-latex-labels ()
  "Remove labels generated by org-mode"
  (interactive)
  (let ((case-fold-search nil))
   (goto-char 1)
   (replace-regexp "\\\\label{sec-[0-9][^}]*}" "")
   )
)

(defun peng-emacs-generage-org-content ()
  "这个函数可以为我的org文件生成一个目录"
  (interactive)
  (let* ((fin "")
	 pos)
    (save-excursion
      (goto-char (point-min))
      (replace-regexp "^#\\+BEGIN_QUOTE\n\\*Table of Contents\\*\n\\(?:.\\|\n\\)*+?#\\+END_QUOTE" "")
      (insert "\n")
      (goto-char (point-min))
      (setq pos (point)))
    (goto-char (point-min))
    (while (re-search-forward "^\\(\\*+\\) \\(.+\\)" nil :no-error)
      (let* ((depth (length (match-string 1)))
	     (name (match-string 2)))
	(setq fin (concat fin (format "%s- [[#%s][%s]]\n"
				      (make-string (* 2 (1- depth)) 32)
				      (replace-regexp-in-string
				       " " "-"
				       (replace-regexp-in-string
					"[^A-z0-9- ]" "" (downcase name)))
				      name
				      )))))
    (goto-char pos)
    (insert (format "#+BEGIN_QUOTE\n*Table of Contents*\n%s#+END_QUOTE" fin))))

(provide 'init-peng-copyfun)
